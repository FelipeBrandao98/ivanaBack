generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
model Mailer {
  id          Int           @id @default(autoincrement())
  mail        String        @unique
  createdAt   DateTime      @default(now())
  Appointment Appointment[]
}

model Image {
  id                 Int                  @id @default(autoincrement())
  src                String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  author             String?
  url                String
  Collection         Collection[]
  CollectionCategory CollectionCategory[]
  CollectionClothes  CollectionClothes[]
  Avaliation         Comments[]
  News               News[]
  TrackList          TrackList[]
}

model News {
  id            Int           @id @default(autoincrement())
  categoryId    Int?
  title         String        @unique
  coverId       Int?
  coverCredit   String
  subtitle      String        @unique
  publishDate   DateTime      @default(now())
  published     Boolean       @default(false)
  body          String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  bodyDe        String?
  bodyEn        String?
  bodyFr        String?
  coverCreditDe String?
  coverCreditEn String?
  coverCreditFr String?
  subtitleDe    String?
  subtitleEn    String?
  subtitleFr    String?
  titleDe       String?
  titleEn       String?
  titleFr       String?
  category      NewsCategory? @relation(fields: [categoryId], references: [id])
  cover         Image?        @relation(fields: [coverId], references: [id])
}

model NewsCategory {
  id            Int      @id @default(autoincrement())
  description   String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  descriptionDe String?
  descriptionEn String?
  descriptionFr String?
  News          News[]
}

model Collection {
  id                Int                 @id @default(autoincrement())
  title             String
  description       String
  categoryId        Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  descriptionDe     String?
  descriptionEn     String?
  descriptionFr     String?
  titleDe           String?
  titleEn           String?
  titleFr           String?
  coverId           Int?
  category          CollectionCategory? @relation(fields: [categoryId], references: [id])
  cover             Image?              @relation(fields: [coverId], references: [id])
  CollectionClothes CollectionClothes[]
  CollectionImages  CollectionImages[]
}

model CollectionCategory {
  id               Int          @id @default(autoincrement())
  description      String
  subdescription   String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  coverId          Int?
  descriptionDe    String?
  descriptionEn    String?
  descriptionFr    String?
  subdescriptionDe String?
  subdescriptionEn String?
  subdescriptionFr String?
  Collection       Collection[]
  cover            Image?       @relation(fields: [coverId], references: [id])
}

model CollectionImages {
  id           Int         @id @default(autoincrement())
  src          String      @unique
  url          String
  author       String?
  collectionId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  collection   Collection? @relation(fields: [collectionId], references: [id])
}

model CollectionClothes {
  id           Int         @id @default(autoincrement())
  collectionId Int?
  coverId      Int?
  likes        Int?
  isProduct    Boolean?
  name         String?
  nameDe       String?
  nameFr       String?
  nameEn       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  collection   Collection? @relation(fields: [collectionId], references: [id])
  cover        Image?      @relation(fields: [coverId], references: [id])
}

model Comments {
  id          Int      @id @default(autoincrement())
  commentCode String   @unique @default(cuid())
  avaliation  Int?
  description String?
  likes       Int?
  isActive    Boolean? @default(false)
  createdAt   DateTime @default(now())
  imageId     Int?
  userName    String?
  image       Image?   @relation(fields: [imageId], references: [id])
}

model Appointment {
  id         Int      @id @default(autoincrement())
  name       String
  mailerId   Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bride      Boolean  @default(false)
  bridesmaid Boolean  @default(false)
  debutant   Boolean  @default(false)
  groom      Boolean  @default(false)
  party      Boolean  @default(false)
  phone      String
  merryDate  DateTime
  mailer     Mailer?  @relation(fields: [mailerId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  birthDate DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrackList {
  id         Int      @id @default(autoincrement())
  name       String
  audioId    Int?
  isHomeSong Boolean?
  audio      Image?   @relation(fields: [audioId], references: [id])
  coverId    Int?
}
