generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Mailer
model Mailer {
  id          Int           @id @default(autoincrement())
  mail        String        @unique
  createdAt   DateTime      @default(now())
  Appointment Appointment[]
}

// Images
model Image {
  id                 Int                  @id @default(autoincrement())
  src                String               @unique
  url                String
  author             String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  News               News[]
  Collection         Collection[]
  CollectionCategory CollectionCategory[]
  Avaliation         Comments[]
}

// News
model News {
  id            Int           @id @default(autoincrement())
  category      NewsCategory? @relation(fields: [categoryId], references: [id])
  categoryId    Int?
  title         String        @unique
  titleDe       String?
  titleEn       String?
  titleFr       String?
  cover         Image?        @relation(fields: [coverId], references: [id])
  coverId       Int?
  coverCredit   String
  coverCreditDe String?
  coverCreditEn String?
  coverCreditFr String?
  subtitle      String        @unique
  subtitleDe    String?
  subtitleEn    String?
  subtitleFr    String?
  publishDate   DateTime      @default(now())
  published     Boolean       @default(false)
  body          String
  bodyDe        String?
  bodyEn        String?
  bodyFr        String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model NewsCategory {
  id            Int      @id @default(autoincrement())
  description   String
  descriptionDe String?
  descriptionEn String?
  descriptionFr String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  News          News[]
}

// Collections
model Collection {
  id               Int                 @id @default(autoincrement())
  title            String
  titleDe          String?
  titleEn          String?
  titleFr          String?
  description      String
  descriptionDe    String?
  descriptionEn    String?
  descriptionFr    String?
  category         CollectionCategory? @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  cover            Image?              @relation(fields: [coverId], references: [id])
  coverId          Int?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  CollectionImages CollectionImages[]
}

model CollectionCategory {
  id               Int          @id @default(autoincrement())
  description      String
  descriptionDe    String?
  descriptionEn    String?
  descriptionFr    String?
  subdescription   String
  subdescriptionDe String?
  subdescriptionEn String?
  subdescriptionFr String?
  cover            Image?       @relation(fields: [coverId], references: [id])
  coverId          Int?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Collection       Collection[]
}

model CollectionImages {
  id           Int         @id @default(autoincrement())
  src          String      @unique
  url          String
  author       String?
  collection   Collection? @relation(fields: [collectionId], references: [id])
  collectionId Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Comments {
  id          Int      @id @default(autoincrement())
  userName    String
  avaliation  Int
  description String
  likes       Int
  isActive    Boolean
  createdAt   DateTime @default(now())
  image       Image?   @relation(fields: [imageId], references: [id])
  imageId     Int?
}

model Appointment {
  id         Int      @id @default(autoincrement())
  name       String
  mailerId   Int?
  mailer     Mailer?  @relation(fields: [mailerId], references: [id])
  phone      Int
  bride      Boolean  @default(false)
  groom      Boolean  @default(false)
  debutant   Boolean  @default(false)
  bridesmaid Boolean  @default(false)
  party      Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
